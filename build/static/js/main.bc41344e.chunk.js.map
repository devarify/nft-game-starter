{"version":3,"sources":["constants.js","Components/LoadingIndicator/index.js","Components/Arena/index.js","Components/SelectCharacter/index.js","assets/twitter-logo.svg","App.js","index.js"],"names":["CONTRACT_ADDRESS","transformCharacterData","characterData","name","imageURI","hp","toNumber","maxHp","attackDamage","LoadingIndicator","className","Arena","characterNFT","setCharacterNFT","useState","gameContract","setGameContract","boss","setBoss","attackState","setAttackState","showToast","setShowToast","runAttackAction","a","console","log","attackBoss","attackTxn","wait","setTimeout","error","useEffect","ethereum","window","signer","ethers","providers","Web3Provider","getSigner","Contract","myEpicGame","abi","fetchBoss","getBigBoss","bossTxn","onAttackComplete","newBossHp","newPlayerHp","bossHp","playerHp","prevState","on","off","id","src","alt","value","max","onClick","SelectCharacter","characters","setCharacters","mintingCharacter","setMintingCharacter","getCharacters","getAllDefaultCharacters","charactersTxn","map","onCharacterMint","sender","tokenId","characterIndex","checkIfUserHasNFT","alert","mintCharacterNFTAction","characterId","mintCharacterNFT","mintTxn","warn","length","character","index","type","TWITTER_HANDLE","TWITTER_LINK","App","currentAccount","setCurrentAccount","isLoading","setIsLoading","checkIfWalletIsConnected","request","method","accounts","account","connectWalletAction","chainId","fetchNFTMetadata","provider","href","target","rel","class","twitterLogo","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bc41344e.chunk.js","sourcesContent":["const CONTRACT_ADDRESS = '0xaAd74358Bf8f25C4d2782dF29BaA3E6ae01f15a6';\r\n\r\n/*\r\n * Add this method and make sure to export it on the bottom!\r\n */\r\nconst transformCharacterData = (characterData) => {\r\n  return {\r\n    name: characterData.name,\r\n    imageURI: characterData.imageURI,\r\n    hp: characterData.hp.toNumber(),\r\n    maxHp: characterData.maxHp.toNumber(),\r\n    attackDamage: characterData.attackDamage.toNumber(),\r\n  };\r\n};\r\n\r\nexport { CONTRACT_ADDRESS, transformCharacterData };","import React from 'react';\nimport './LoadingIndicator.css';\n\nconst LoadingIndicator = () => {\n  return (\n    <div className=\"lds-ring\">\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n    </div>\n  );\n};\n\nexport default LoadingIndicator;\n","import React, { useEffect, useState } from 'react';\r\nimport { ethers } from 'ethers';\r\nimport { CONTRACT_ADDRESS, transformCharacterData } from '../../constants';\r\nimport myEpicGame from '../../utils/MyEpicGame.json';\r\nimport './Arena.css';\r\nimport LoadingIndicator from '../../Components/LoadingIndicator';\r\n\r\n/*\r\n * We pass in our characterNFT metadata so we can a cool card in our UI\r\n */\r\nconst Arena = ({ characterNFT, setCharacterNFT }) => {\r\n  // State\r\n  const [gameContract, setGameContract] = useState(null);\r\n  const [boss, setBoss] = useState(null);\r\n  const [attackState, setAttackState] = useState('');\r\n  const [showToast, setShowToast] = useState(false);\r\n  // Actions\r\n  const runAttackAction = async () => {\r\n    try {\r\n      if (gameContract) {\r\n        setAttackState('attacking');\r\n        console.log('Attacking boss...');\r\n        const attackTxn = await gameContract.attackBoss();\r\n        await attackTxn.wait();\r\n        console.log('attackTxn:', attackTxn);\r\n        setAttackState('hit');\r\n        setShowToast(true);\r\n      setTimeout(() => {\r\n        setShowToast(false);\r\n      }, 5000);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error attacking boss:', error);\r\n      setAttackState('');\r\n    }\r\n  };\r\n\r\n  // UseEffects\r\n  useEffect(() => {\r\n    const { ethereum } = window;\r\n\r\n    if (ethereum) {\r\n      const provider = new ethers.providers.Web3Provider(ethereum);\r\n      const signer = provider.getSigner();\r\n      const gameContract = new ethers.Contract(\r\n        CONTRACT_ADDRESS,\r\n        myEpicGame.abi,\r\n        signer\r\n      );\r\n\r\n      setGameContract(gameContract);\r\n    } else {\r\n      console.log('Ethereum object not found');\r\n    }\r\n  }, []);\r\n  \r\n  useEffect(() => {\r\n    const fetchBoss = async () => {\r\n        const bossTxn = await gameContract.getBigBoss();\r\n        console.log('Boss:', bossTxn);\r\n        setBoss(transformCharacterData(bossTxn));\r\n    };\r\n\r\n    /*\r\n    * Setup logic when this event is fired off\r\n    */\r\n    const onAttackComplete = (newBossHp, newPlayerHp) => {\r\n        const bossHp = newBossHp.toNumber();\r\n        const playerHp = newPlayerHp.toNumber();\r\n\r\n        console.log(`AttackComplete: Boss Hp: ${bossHp} Player Hp: ${playerHp}`);\r\n\r\n        /*\r\n        * Update both player and boss Hp\r\n        */\r\n        setBoss((prevState) => {\r\n            return { ...prevState, hp: bossHp };\r\n        });\r\n\r\n        setCharacterNFT((prevState) => {\r\n            return { ...prevState, hp: playerHp };\r\n        });\r\n          \r\n    };\r\n\r\n    if (gameContract) {\r\n        fetchBoss();\r\n        gameContract.on('AttackComplete', onAttackComplete);\r\n    }\r\n\r\n    /*\r\n    * Make sure to clean up this event when this component is removed\r\n    */\r\n    return () => {\r\n        if (gameContract) {\r\n            gameContract.off('AttackComplete', onAttackComplete);\r\n        }\r\n    }\r\n}, [gameContract]);\r\n\r\n  \r\n\r\nreturn (\r\n    <div className=\"arena-container\">\r\n      {/* Add your toast HTML right here */}\r\n      {boss && characterNFT && (\r\n        <div id=\"toast\" className={showToast ? 'show' : ''}>\r\n          <div id=\"desc\">{`💥 ${boss.name} was hit for ${characterNFT.attackDamage}!`}</div>\r\n        </div>\r\n      )}\r\n  \r\n      {/* Boss */}\r\n      {boss && (\r\n        <div className=\"boss-container\">\r\n          <div className={`boss-content  ${attackState}`}>\r\n            <h2>🔥 {boss.name} 🔥</h2>\r\n            <div className=\"image-content\">\r\n              <img src={boss.imageURI} alt={`Boss ${boss.name}`} />\r\n              <div className=\"health-bar\">\r\n                <progress value={boss.hp} max={boss.maxHp} />\r\n                <p>{`${boss.hp} / ${boss.maxHp} HP`}</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"attack-container\">\r\n            <button className=\"cta-button\" onClick={runAttackAction}>\r\n              {`💥 Attack ${boss.name}`}\r\n            </button>\r\n          </div>\r\n          {attackState === 'attacking' && (\r\n            <div className=\"loading-indicator\">\r\n              <LoadingIndicator />\r\n              <p>Attacking ⚔️</p>\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n  \r\n      {/* Character NFT */}\r\n      {characterNFT && (\r\n        <div className=\"players-container\">\r\n          <div className=\"player-container\">\r\n            <h2>Your Character</h2>\r\n            <div className=\"player\">\r\n              <div className=\"image-content\">\r\n                <h2>{characterNFT.name}</h2>\r\n                <img\r\n                  src={characterNFT.imageURI}\r\n                  alt={`Character ${characterNFT.name}`}\r\n                />\r\n                <div className=\"health-bar\">\r\n                  <progress value={characterNFT.hp} max={characterNFT.maxHp} />\r\n                  <p>{`${characterNFT.hp} / ${characterNFT.maxHp} HP`}</p>\r\n                </div>\r\n              </div>\r\n              <div className=\"stats\">\r\n                <h4>{`⚔️ Attack Damage: ${characterNFT.attackDamage}`}</h4>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          {/* <div className=\"active-players\">\r\n            <h2>Active Players</h2>\r\n            <div className=\"players-list\">{renderActivePlayersList()}</div>\r\n          </div> */}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Arena;","import React, { useEffect, useState } from 'react';\r\nimport './SelectCharacter.css';\r\nimport { ethers } from 'ethers';\r\nimport { CONTRACT_ADDRESS, transformCharacterData } from '../../constants';\r\nimport myEpicGame from '../../utils/MyEpicGame.json';\r\nimport LoadingIndicator from '../../Components/LoadingIndicator';\r\n\r\nconst SelectCharacter = ({ setCharacterNFT }) => {\r\n    const [characters, setCharacters] = useState([]);\r\n    const [gameContract, setGameContract] = useState(null);\r\n    const [mintingCharacter, setMintingCharacter] = useState(false);\r\n    \r\n    // UseEffect\r\nuseEffect(() => {\r\n    \r\n    const { ethereum } = window;\r\n  \r\n    if (ethereum) {\r\n      const provider = new ethers.providers.Web3Provider(ethereum);\r\n      const signer = provider.getSigner();\r\n      const gameContract = new ethers.Contract(\r\n        CONTRACT_ADDRESS,\r\n        myEpicGame.abi,\r\n        signer\r\n      );\r\n      \r\n\r\n  \r\n      /*\r\n       * This is the big difference. Set our gameContract in state.\r\n       */\r\n      setGameContract(gameContract);\r\n    } else {\r\n      console.log('Ethereum object not found');\r\n    }\r\n  }, []);\r\n  useEffect(() => {\r\n    const getCharacters = async () => {\r\n      try {\r\n        console.log('Getting contract characters to mint');\r\n  \r\n        const charactersTxn = await gameContract.getAllDefaultCharacters();\r\n        console.log('charactersTxn:', charactersTxn);\r\n  \r\n        const characters = charactersTxn.map((characterData) =>\r\n          transformCharacterData(characterData)\r\n        );\r\n  \r\n        setCharacters(characters);\r\n      } catch (error) {\r\n        console.error('Something went wrong fetching characters:', error);\r\n      }\r\n    };\r\n    \r\n    /*\r\n     * Add a callback method that will fire when this event is received\r\n     */\r\n    const onCharacterMint = async (sender, tokenId, characterIndex) => {\r\n        console.log(\r\n          `CharacterNFTMinted - sender: ${sender} tokenId: ${tokenId.toNumber()} characterIndex: ${characterIndex.toNumber()}`\r\n        );\r\n      \r\n        if (gameContract) {\r\n          const characterNFT = await gameContract.checkIfUserHasNFT();\r\n          console.log('CharacterNFT: ', characterNFT);\r\n          setCharacterNFT(transformCharacterData(characterNFT));\r\n        }\r\n      alert(`Your NFT is all done -- see it here: https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`)\r\n    };\r\n  \r\n    \r\n    if (gameContract) {\r\n      getCharacters();\r\n  \r\n      /*\r\n       * Setup NFT Minted Listener\r\n       */\r\n      gameContract.on('CharacterNFTMinted', onCharacterMint);\r\n    }\r\n\r\n    \r\n  \r\n    return () => {\r\n      /*\r\n       * When your component unmounts, let;s make sure to clean up this listener\r\n       */\r\n      if (gameContract) {\r\n        gameContract.off('CharacterNFTMinted', onCharacterMint);\r\n      }\r\n    };\r\n  }, [gameContract]);\r\n  \r\n\r\n// Render Methods\r\nconst renderCharacters = () =>\r\n  characters.map((character, index) => (\r\n    <div className=\"character-item\" key={character.name}>\r\n      <div className=\"name-container\">\r\n        <p>{character.name}</p>\r\n      </div>\r\n      <img src={character.imageURI} alt={character.name} />\r\n      <button\r\n        type=\"button\"\r\n        className=\"character-mint-button\"\r\n        onClick={mintCharacterNFTAction(index)}\r\n      >{`Mint ${character.name}`}</button>\r\n    </div>\r\n  ));\r\n\r\n  // Actions\r\n  const mintCharacterNFTAction = (characterId) => async () => {\r\n    try {\r\n      if (gameContract) {\r\n        /*\r\n         * Show our loading indicator\r\n         */\r\n        setMintingCharacter(true);\r\n        console.log('Minting character in progress...');\r\n        const mintTxn = await gameContract.mintCharacterNFT(characterId);\r\n        await mintTxn.wait();\r\n        console.log(mintTxn);\r\n        /*\r\n         * Hide our loading indicator when minting is finished\r\n         */\r\n        setMintingCharacter(false);\r\n      }\r\n    } catch (error) {\r\n      console.warn('MintCharacterAction Error:', error);\r\n      /*\r\n       * If there is a problem, hide the loading indicator as well\r\n       */\r\n      setMintingCharacter(false);\r\n    }\r\n  };\r\n\r\n\r\n\r\n  \r\n    return (\r\n        <div className=\"select-character-container\">\r\n        <h2>Mint Your Hero. Choose wisely.</h2>\r\n        {characters.length > 0 && (\r\n          <div className=\"character-grid\">{renderCharacters()}</div>\r\n        )}\r\n        {/* Only show our loading state if mintingCharacter is true */}\r\n        {mintingCharacter && (\r\n          <div className=\"loading\">\r\n            <div className=\"indicator\">\r\n              <LoadingIndicator />\r\n              <p>Minting In Progress...</p>\r\n            </div>\r\n            <img\r\n              src=\"https://media2.giphy.com/media/61tYloUgq1eOk/giphy.gif?cid=ecf05e47dg95zbpabxhmhaksvoy8h526f96k4em0ndvx078s&rid=giphy.gif&ct=g\"\r\n              alt=\"Minting loading indicator\"\r\n            />\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  \r\n  export default SelectCharacter;","export default __webpack_public_path__ + \"static/media/twitter-logo.a8a75254.svg\";","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { CONTRACT_ADDRESS, transformCharacterData } from './constants';\nimport { ethers } from 'ethers';\nimport Arena from './Components/Arena';\nimport myEpicGame from './utils/MyEpicGame.json';\nimport SelectCharacter from './Components/SelectCharacter';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport LoadingIndicator from './Components/LoadingIndicator';\n\n// Constants\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst OURWEBSITE = 'https://webarify.id';\nconst App = () => {\n  // State\n  const [currentAccount, setCurrentAccount] = useState(null);\n  const [characterNFT, setCharacterNFT] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n// Actions\nconst checkIfWalletIsConnected = async () => {\n  try {\n    const { ethereum } = window;\n\n    if (!ethereum) {\n      console.log('Make sure you have MetaMask!');\n      /*\n       * We set isLoading here because we use return in the next line\n       */\n      setIsLoading(false);\n      return;\n    } else {\n      console.log('We have the ethereum object', ethereum);\n\n      const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log('Found an authorized account:', account);\n        setCurrentAccount(account);\n      } else {\n        console.log('No authorized account found');\n      }\n    }\n  } catch (error) {\n    console.log(error);\n  }\n  /*\n   * We release the state property after all the function logic\n   */\n  setIsLoading(false);\n};\n\n  // Render Methods\n// Render Methods\n\nconst renderContent = () => {\n  /*\n   * If the app is currently loading, just render out LoadingIndicator\n   */\n  if (isLoading) {\n    return <LoadingIndicator />;\n  }\n\n  if (!currentAccount) {\n    return (\n      <div className=\"connect-wallet-container\">\n        <img\n          src=\"https://i.ibb.co/c1FvNSn/Output-onlinegiftools.gif\"\n          alt=\"Dino Gif\"\n        />\n        <button\n          className=\"cta-button connect-wallet-button\"\n          onClick={connectWalletAction}\n        >\n          Connect Wallet To Get Started\n        </button>\n      </div>\n    );\n  } else if (currentAccount && !characterNFT) {\n    return <SelectCharacter setCharacterNFT={setCharacterNFT} />;\n  } else if (currentAccount && characterNFT) {\n    return (\n      <Arena characterNFT={characterNFT} setCharacterNFT={setCharacterNFT} />\n    );\n  }\n};\n\n  /*\n   * Implement your connectWallet method here\n   */\n  const connectWalletAction = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert('Get MetaMask, Use Desktop Browser & MetaMask Extension!');\n        return;\n      }\n\n      let chainId = await ethereum.request({ method: 'eth_chainId' });\n          console.log(\"Connected to chain \" + chainId);\n          \n          // String, hex code of the chainId of the Rinkebey test network\n          const rinkebyChainId = \"0x4\"; \n          if (chainId !== rinkebyChainId) {\n            alert(\"You are not connected to the Rinkeby Test Network!\");\n            return;\n          }\n\n      /*\n       * Fancy method to request access to account.\n       */\n      const accounts = await ethereum.request({\n        method: 'eth_requestAccounts',\n      });\n\n      /*\n       * Boom! This should print out public address once we authorize Metamask.\n       */\n      console.log('Connected', accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n\n  /*\n * Add this useEffect right under the other useEffect where you are calling checkIfWalletIsConnected\n */\n// UseEffects\nuseEffect(() => {\n  /*\n   * Anytime our component mounts, make sure to immiediately set our loading state\n   */\n  setIsLoading(true);\n  checkIfWalletIsConnected();\n}, []);\n\nuseEffect(() => {\n  const fetchNFTMetadata = async () => {\n    console.log('Checking for Character NFT on address:', currentAccount);\n\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    const gameContract = new ethers.Contract(\n      CONTRACT_ADDRESS,\n      myEpicGame.abi,\n      signer\n    );\n\n    const characterNFT = await gameContract.checkIfUserHasNFT();\n    if (characterNFT.name) {\n      console.log('User has character NFT');\n      setCharacterNFT(transformCharacterData(characterNFT));\n    }\n\n    /*\n     * Once we are done with all the fetching, set loading state to false\n     */\n    setIsLoading(false);\n  };\n\n  if (currentAccount) {\n    console.log('CurrentAccount:', currentAccount);\n    fetchNFTMetadata();\n  }\n}, [currentAccount]);\n\nconst fetchNFTMetadata = async () => {\n  console.log('Checking for Character NFT on address:', currentAccount);\n\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  const signer = provider.getSigner();\n  const gameContract = new ethers.Contract(\n    CONTRACT_ADDRESS,\n    myEpicGame.abi,\n    signer\n  );\n\n  const txn = await gameContract.checkIfUserHasNFT();\n  if (txn.name) {\n    console.log('User has character NFT');\n    setCharacterNFT(transformCharacterData(txn));\n  } else {\n    console.log('No character NFT found');\n  }\n};\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">Dinoverse Attack!</p>\n          <p className=\"sub-text\">Let's Team Up! Protect Our Dinoverse</p>\n          {/* This is where our button and image code used to be!\n           *\tRemember we moved it into the render method.\n           */}\n          {renderContent()}\n        </div>\n        <div className=\"footer-container\">\n        <p className=\"footer-text\">An Attempt to Build a turn-based, NFT browser game on Ethereum in Rinkeby Test Network\n        by\n        <a\n            className=\"footer-text\"\n            href={OURWEBSITE}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >&nbsp;{`@arify`}</a>. </p>\n        </div>\n\n        <div className=\"header\">\n          <p class=\"sub-text\">Send me an ETH! @ <span>0xd41105953e3818Af03B3E2d810cBeC4077Ba20D2</span></p>\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built with @${TWITTER_HANDLE}`}</a>\n        </div>\n        \n        \n      </div>\n    </div>\n  );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}